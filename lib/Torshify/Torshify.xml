<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Torshify</name>
    </assembly>
    <members>
        <member name="T:Torshify.ArtistBrowseType">
            <summary>
            Controls the type of data that will be included in artist browse queries
            </summary>
        </member>
        <member name="F:Torshify.ArtistBrowseType.Full">
            <summary>
            All information except tophit tracks
            </summary>
        </member>
        <member name="F:Torshify.ArtistBrowseType.NoTracks">
            <summary>
            Only albums and data about them, no tracks.
            </summary>
        </member>
        <member name="F:Torshify.ArtistBrowseType.NoAlbums">
            <summary>
            Only return data about the artist (artist name, similar artist biography, etc
            No tracks or album will be available.
            </summary>
        </member>
        <member name="T:Torshify.ConnectionRule">
            <summary>
            Connection rules, bitwise OR of flags
            The default is SP_CONNECTION_RULE_NETWORK | SP_CONNECTION_RULE_ALLOW_SYNC
            </summary>
        </member>
        <member name="F:Torshify.ConnectionRule.Network">
            <summary>
            Allow network traffic. When not set libspotify will force itself into offline mode
            </summary>
        </member>
        <member name="F:Torshify.ConnectionRule.NetworkIfRoaming">
            <summary>
            Allow network traffic even if roaming
            </summary>
        </member>
        <member name="F:Torshify.ConnectionRule.AllowSyncOverMobile">
            <summary>
            Set to allow syncing of offline content over mobile connections
            </summary>
        </member>
        <member name="F:Torshify.ConnectionRule.AllowSyncOverWifi">
            <summary>
            Set to allow syncing of offline content over WiFi
            </summary>
        </member>
        <member name="F:Torshify.ConnectionType.Unknown">
            <summary>
            Connection type unknown (default)
            </summary>
        </member>
        <member name="F:Torshify.ConnectionType.None">
            <summary>
            No connection
            </summary>
        </member>
        <member name="F:Torshify.ConnectionType.Mobile">
            <summary>
            Mobile data (EDGE, 3G, etc)
            </summary>
        </member>
        <member name="F:Torshify.ConnectionType.MobileRoaming">
            <summary>
            Roamed mobile data (EDGE, 3G, etc)
            </summary>
        </member>
        <member name="F:Torshify.ConnectionType.Wifi">
            <summary>
            Wireless connection
            </summary>
        </member>
        <member name="F:Torshify.ConnectionType.Wired">
            <summary>
            Ethernet cable, etc
            </summary>
        </member>
        <member name="M:Torshify.IPlaylist.AutoLinkTracks(System.Boolean)">
            <summary>
            Set autolinking state for the playlist
            
            If a playlist is autolinked, unplayable tracks will be made playable
            by linking them to other Spotify tracks, where possible.
            </summary>
            <param name="autoLink">if set to <c>true</c> auto linking is enabled.</param>
        </member>
        <member name="M:Torshify.IPlaylist.SetOfflineMode(System.Boolean)">
            <summary>
            Mark a playlist to be synchronized for offline playback
            </summary>
            <param name="offline"></param>
        </member>
        <member name="M:Torshify.IPlaylist.GetOfflineDownloadCompleted">
            <summary>
            Get download progress for an offline playlist
            </summary>
            <returns>Value from 0 - 100 that indicates amount of playlist that is downloaded</returns>
        </member>
        <member name="M:Torshify.IPlaylist.UpdateSubscribers">
            <summary>
            Ask library to update the subscription count for a playlist
            </summary>
        </member>
        <member name="P:Torshify.IPlaylist.IsLoaded">
            <summary>
            Gets a value indicating whether this playlist is loaded.
            </summary>
            <value>
              <c>true</c> if this playlist is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Torshify.IPlaylist.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:Torshify.IPlaylist.ImageId">
            <summary>
            Gets the image id.
            </summary>
        </member>
        <member name="P:Torshify.IPlaylist.IsCollaborative">
            <summary>
            Gets or sets a value indicating whether this playlist is collaborative.
            </summary>
            <value>
            <c>true</c> if this playlist is collaborative; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Torshify.IPlaylist.Name">
            <summary>
            Gets or sets the name of this playilst
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Torshify.IPlaylist.PendingChanges">
            <summary>
            Gets a value indicating whether this playlist has any pending changes.
            </summary>
            <value>
              <c>true</c> if it has any pending changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Torshify.IPlaylist.Tracks">
            <summary>
            Gets the tracks for this playlist
            </summary>
        </member>
        <member name="P:Torshify.IPlaylist.OfflineStatus">
            <summary>
            Get offline status
            </summary>
            <remarks>
            When in Downloading mode, the GetOfflineDownloadCompleted() can be used to query progress of the download
            </remarks>
        </member>
        <member name="P:Torshify.IPlaylist.Subscribers">
            <summary>
            Returns a collection of canonical usernames of who are subscribing to this playlist
            </summary>
        </member>
        <member name="P:Torshify.IPlaylist.Owner">
            <summary>
            Returns the owner of the playlist
            </summary>
        </member>
        <member name="P:Torshify.IPlaylist.IsInRam">
            <summary>
            Return whether a playlist is loaded in RAM (as opposed to only stored on disk)
            </summary>
        </member>
        <member name="M:Torshify.IContainerPlaylist.GetUnseenTracks(System.Int32,System.Int32@)">
            <summary>
            Get the number of new tracks in a playlist since the corresponding
            function TryClearUnseenTracks() was called.
            </summary>
            <param name="maxReturnedTracks"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.IContainerPlaylist.TryClearUnseenTracks">
            <summary>
            Clears a playlist for unseen tracks, so that next call to GetUnseenTracks() will return en empty list until a new track is added to the playslist.
            </summary>
        </member>
        <member name="M:Torshify.ISession.Relogin">
            <summary>
            <exception cref="T:System.Security.Authentication.AuthenticationException">Thrown when no credentials are stored.</exception>
            </summary>
        </member>
        <member name="M:Torshify.ISession.ForgetStoredLogin">
            <summary>
            Remove stored credentials in libspotify. If no credentials are currently stored, nothing will happen.
            </summary>
        </member>
        <member name="M:Torshify.ISession.GetRememberedUser">
            <summary>
            Get username of the user that will be logged in via ISession.Relogin()
            </summary>
            <returns>Username of user which will be used in Relogin. If no login stored, it will return an empty string</returns>
        </member>
        <member name="M:Torshify.ISession.SetPreferredBitrate(Torshify.Bitrate)">
            <summary>
            Set preferred bitrate for music streaming
            </summary>
            <param name="bitrate">Preferred bitrate</param>
            <returns>Current session</returns>
        </member>
        <member name="M:Torshify.ISession.SetPreferredOfflineBitrate(Torshify.Bitrate,System.Boolean)">
            <summary>
            Set preferred bitrate for offline sync
            </summary>
            <param name="bitrate">Preferred bitrat</param>
            <param name="resync">Set to true if libspotify should resynchronize already synchronized tracks. Usually you should set this to false.</param>
            <returns>Current session</returns>
        </member>
        <member name="M:Torshify.ISession.SetConnectionType(Torshify.ConnectionType)">
            <summary>
            Set current connection type
            </summary>
            <remarks>Used in conjunction with SetConnectionRules to control
            how libspotify should behave in respect to network activity and offline synchronization.</remarks>
            <param name="connectionType">Connection type</param>
            <returns>Current session</returns>
        </member>
        <member name="M:Torshify.ISession.SetConnectionRules(Torshify.ConnectionRule)">
            <summary>
            Set rules for how libspotify connects to Spotify servers and synchronizes offline content
            </summary>
            <remarks>Used in conjunction with SetConnectionType to control
            how libspotify should behave in respect to network activity and offline synchronization.</remarks>
            <param name="connectionRule">Connection rules</param>
            <returns>Current session</returns>
        </member>
        <member name="M:Torshify.ISession.SetCacheSize(System.UInt32)">
            <summary>
            Set maximum cache size in megabytes.
            Setting it to 0 (the default) will let libspotify automatically resize the cache (10% of disk free space)
            </summary>
            <param name="megabytes">Maximum cache size in megabytes.</param>
            <returns>Current session</returns>
        </member>
        <member name="M:Torshify.ISession.GetNumberOfOfflineTracksRemainingToSync">
            <summary>
            Get total number of tracks that needs download before everything
            from all playlists that is marked for offline is fully synchronized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Torshify.ISession.GetNumberOfOfflinePlaylists">
            <summary>
            Return number of playlisys that is marked for offline synchronization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Torshify.ISession.GetOfflineSyncStatus">
            <summary>
            Return offline synchronization status.
            </summary>
            <returns>Sync status</returns>
        </member>
        <member name="M:Torshify.ISession.GetStarredForUser(System.String)">
            <summary>
            Returns the starred list for a user
            </summary>
            <param name="canonicalUserName">Canonical username</param>
            <returns> A playlist or NULL if no user is logged in</returns>
        </member>
        <member name="M:Torshify.ISession.GetPlaylistContainerForUser(System.String)">
            <summary>
            Return the published container for given a canonical username,
            or the currently logged in user if canonicalUsername is NULL.
            </summary>
            <param name="canonicalUsername"></param>
            <returns>Playlist container object, NULL if not logged in.</returns>
        </member>
        <member name="M:Torshify.ISession.FlushCaches">
            <summary>
             This will make libspotify write all data that is meant to be stored
            on disk to the disk immediately. libspotify does this periodically
            by itself and also on logout. So under normal conditions this should never need to be used.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Torshify.ISession.LoggedInUserCountry" -->
        <member name="P:Torshify.ISession.IsVolumeNormalizationEnabled">
            <summary>
            Get/sets whether volume normalization should be enabled
            </summary>
        </member>
        <member name="P:Torshify.ISession.IsPrivateSessionEnabled">
            <summary>
            Get/set if private session is enabled. This disables sharing what the user is listening to
            to services such as Spotify Social, Facebook and LastFM. The private session will
            last for a time, and then libspotify will revert to the normal state. The private
            session is prolonged by user activity.
            </summary>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_add_ref(System.IntPtr)">
            <summary>
            Increase the reference count of an toplist browse result
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_release(System.IntPtr)">
            <summary>
            Decrease the reference count of an toplist browse result
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_create(System.IntPtr,Torshify.ToplistType,System.Int32,System.String,Torshify.Core.Native.Spotify.ToplistBrowseCompleteCallback,System.IntPtr)">
            <summary>
            Initiate a request for browsing an toplist
            
            The user is responsible for freeing the returned toplist browse using sp_toplistbrowse_release(). This can be done in the callback.
            </summary>
            <param name="sessionPtr">Session object</param>
            <param name="toplistType">Type of toplist to be browsed. see the sp_toplisttype enum for possible values</param>
            <param name="toplistRegion">Region. see sp_toplistregion enum. Country specific regions are coded as two chars in an integer.</param>
            <param name="userName">If region is SP_TOPLIST_REGION_USER this specifies which user to get toplists for. NULL means the logged in user.</param>
            <param name="completeCallback"> Callback to be invoked when browsing has been completed. Pass NULL if you are not interested in this event.</param>
            <param name="userDataPtr">Userdata passed to callback.</param>
            <returns>Toplist browse object</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_is_loaded(System.IntPtr)">
            <summary>
            Check if an toplist browse request is completed
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_error(System.IntPtr)">
            <summary>
            Check if browsing returned an error code.
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_num_tracks(System.IntPtr)">
            <summary>
            Given an toplist browse object, return number of tracks
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
            <returns>Number of tracks on toplist</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_track(System.IntPtr,System.Int32)">
            <summary>
            Given an toplist browse object, return a pointer to one of its tracks
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
            <param name="index">The index for the track. Should be in the interval [0, sp_toplistbrowse_num_tracks() - 1]</param>
            <returns>A track.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_num_artists(System.IntPtr)">
            <summary>
            Given an toplist browse object, return number of artists
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
            <returns>Number of artists on toplist</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_artist(System.IntPtr,System.Int32)">
            <summary>
            Given an toplist browse object, return a pointer to one of its artists
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
            <param name="index">The index for the artists. Should be in the interval [0, sp_toplistbrowse_num_artists() - 1]</param>
            <returns>A track.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_num_albums(System.IntPtr)">
            <summary>
            Given an toplist browse object, return number of albums
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
            <returns>Number of albums on toplist</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_album(System.IntPtr,System.Int32)">
            <summary>
            Given an toplist browse object, return a pointer to one of its albums
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
            <param name="index">The index for the albums. Should be in the interval [0, sp_toplistbrowse_num_albums() - 1]</param>
            <returns>A track.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_toplistbrowse_backend_request_duration(System.IntPtr)">
            <summary>
            Return the time (in ms) that was spent waiting for the Spotify backend to serve the request
            
            -1 if the request was served from the local cache
            If the result is not yet loaded the return value is undefined
            </summary>
            <param name="browsePtr"> toplist browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_album_is_loaded(System.IntPtr)">
            <summary>
            Check if the album object is populated with data.
            </summary>
            <param name="albumPtr">The album object.</param>
            <returns>True if metadata is present, false if not.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_album_is_available(System.IntPtr)">
            <summary>
            Return true if the album is available in the current region.
            </summary>
            <param name="albumPtr">The album.</param>
            <returns>True if album is available for playback, otherwise false.</returns>
            <remarks>The album must be loaded or this function will always return false.
            <seealso cref="M:Torshify.Core.Native.Spotify.sp_album_is_loaded(System.IntPtr)"/>
            </remarks>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_album_artist(System.IntPtr)">
            <summary>
            Get the artist associated with the given album.
            </summary>
            <param name="albumPtr">Album object.</param>
            <returns>A reference to the artist. null if the metadata has not been loaded yet.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_album_cover(System.IntPtr,Torshify.ImageSize)">
            <summary>
            Return image ID representing the album's coverart.
            </summary>
            <param name="albumPtr">Album object.</param>
            <returns>ID byte sequence that can be passed to <c>sp_image_create()</c>.
            If the album has no image or the metadata for the album is not loaded yet, this function returns null.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_album_name(System.IntPtr)">
            <summary>
            Return name of album.
            </summary>
            <param name="albumPtr">Album object.</param>
            <returns>Name of album. Returned string is valid as long as the album object stays allocated
            and no longer than the next call to <c>sp_session_process_events()</c>.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_album_year(System.IntPtr)">
            <summary>
            Return release year of specified album.
            </summary>
            <param name="albumPtr">The album.</param>
            <returns>Release year.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_album_type(System.IntPtr)">
            <summary>
            Return type of specified album.
            </summary>
            <param name="albumPtr">Album object.</param>
            <returns>The album type.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_album_add_ref(System.IntPtr)">
            <summary>
            Increase the reference count of an album.
            </summary>
            <param name="albumPtr">The album.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_album_release(System.IntPtr)">
            <summary>
            Decrease the reference count of an album.
            </summary>
            <param name="albumPtr">The album.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_create(System.IntPtr,System.IntPtr,Torshify.Core.Native.Spotify.AlbumBrowseCompleteCallback,System.IntPtr)">
            <summary>
            Initiate a request for browsing an album
            
            The user is responsible for freeing the returned album browse using sp_albumbrowse_release(). This can be done in the callback.
            </summary>
            <param name="sessionPtr">Session object</param>
            <param name="albumPtr">Album to be browsed. The album metadata does not have to be loaded</param>
            <param name="callback">Callback to be invoked when browsing has been completed. Pass NULL if you are not interested in this event.</param>
            <param name="userdataPtr">Userdata passed to callback.</param>
            <returns>Album browse object</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_is_loaded(System.IntPtr)">
            <summary>
            Check if an album browse request is completed
            </summary>
            <param name="browsePtr"> Album browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_error(System.IntPtr)">
            <summary>
            Check if browsing returned an error code.
            </summary>
            <param name="browsePtr"> Album browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_album(System.IntPtr)">
            <summary>
            Given an album browse object, return the pointer to its album object
            </summary>
            <param name="browsePtr"> Album browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_artist(System.IntPtr)">
            <summary>
             Given an album browse object, return the pointer to its artist object
            </summary>
            <param name="browsePtr"> Album browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_num_copyrights(System.IntPtr)">
            <summary>
            Given an album browse object, return number of copyright strings
            </summary>
            <param name="browsePtr"> Album browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_copyright(System.IntPtr,System.Int32)">
            <summary>
            Given an album browse object, return one of its copyright strings
            </summary>
            <param name="browsePtr"> Album browse object.</param>
            <param name="index">The index for the copyright string. Should be in the interval [0, sp_albumbrowse_num_copyrights() - 1]</param>
            <returns>Copyright string in UTF-8 format, or NULL if the index is invalid.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_num_tracks(System.IntPtr)">
            <summary>
            Given an album browse object, return number of tracks
            </summary>
            <param name="browsePtr"> Album browse object.</param>
            <returns>Number of tracks on album</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_track(System.IntPtr,System.Int32)">
            <summary>
            Given an album browse object, return a pointer to one of its tracks
            </summary>
            <param name="browsePtr"> Album browse object.</param>
            <param name="index">The index for the track. Should be in the interval [0, sp_albumbrowse_num_tracks() - 1]</param>
            <returns>A track.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_review(System.IntPtr)">
            <summary>
            Given an album browse object, return its review
            </summary>
            <param name="browsePtr"> Album browse object.</param>
            <returns>Review string in UTF-8 format.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_add_ref(System.IntPtr)">
            <summary>
            Increase the reference count of an album browse result
            </summary>
            <param name="browsePtr"> Album browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_release(System.IntPtr)">
            <summary>
            Decrease the reference count of an album browse result
            </summary>
            <param name="browsePtr"> Album browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_albumbrowse_backend_request_duration(System.IntPtr)">
            <summary>
            Return the time (in ms) that was spent waiting for the Spotify backend to serve the request
            
            -1 if the request was served from the local cache
            If the result is not yet loaded the return value is undefined
            </summary>
            <param name="browsePtr"> album browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artist_is_loaded(System.IntPtr)">
            <summary>
            Check if the artist object is populated with data.
            </summary>
            <param name="artistPtr">The artist object.</param>
            <returns>True if metadata is present, false if not.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artist_name(System.IntPtr)">
            <summary>
            Return name of artist.
            </summary>
            <param name="artistPtr">Artist object.</param>
            <returns>Name of artist. Returned string is valid as long as the artist object stays allocated
            and no longer than the next call to <c>sp_session_process_events()</c>.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artist_add_ref(System.IntPtr)">
            <summary>
            Increase the reference count of an artist.
            </summary>
            <param name="artistPtr">The artist.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artist_release(System.IntPtr)">
            <summary>
            Decrease the reference count of an artist.
            </summary>
            <param name="artistPtr">The artist.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artist_portrait(System.IntPtr,Torshify.ImageSize)">
            <summary>
            Return portrait for artist
            </summary>
            <param name="artistPtr"></param>
            <returns> ID byte sequence that can be passed to sp_image_create()
            If the album has no image or the metadata for the album is not
            loaded yet, this function returns NULL.
            </returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_create(System.IntPtr,System.IntPtr,Torshify.ArtistBrowseType,Torshify.Core.Native.Spotify.ArtistBrowseCompleteCallback,System.IntPtr)">
            <summary>
            Initiate a request for browsing an artist
            
            The user is responsible for freeing the returned artist browse using sp_artistbrowse_release(). This can be done in the callback.
            </summary>
            <param name="sessionPtr">Session object</param>
            <param name="artistPtr">Artist to be browsed. The artist metadata does not have to be loaded</param>
            <param name="type">Type of data requested, see the sp_artistbrowse_type enum for details</param>
            <param name="callback">Callback to be invoked when browsing has been completed. Pass NULL if you are not interested in this event.</param>
            <param name="userDataPtr">Userdata passed to callback.</param>
            <returns>Artist browse object</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Torshify.Core.Native.Spotify.sp_artistbrowse_is_loaded(System.IntPtr)" -->
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_error(System.IntPtr)">
            <summary>
            Check if browsing returned an error code.
            </summary>
            <param name="artistBrowsePtr">Artist browse object</param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_artist(System.IntPtr)">
            <summary>
            Given an artist browse object, return a pointer to its artist object
            </summary>
            <param name="artistBrowsePtr">Artist browse object</param>
            <returns>Artist object</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_num_portraits(System.IntPtr)">
            <summary>
            Given an artist browse object, return number of portraits available
            </summary>
            <param name="artistBrowsePtr">Artist browse object</param>
            <returns>Number of portraits for given artist</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_portrait(System.IntPtr,System.Int32)">
            <summary>
            Return image ID representing a portrait of the artist
            </summary>
            <param name="browsePtr">Artist object</param>
            <param name="index">The index of the portrait. Should be in the interval [0, sp_artistbrowse_num_portraits() - 1]</param>
            <returns>ID byte sequence that can be passed to sp_image_create()</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_num_tracks(System.IntPtr)">
            <summary>
            Given an artist browse object, return number of tracks
            </summary>
            <param name="artistBrowsePtr">Artist browse object</param>
            <returns>Number of tracks for given artist</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_track(System.IntPtr,System.Int32)">
            <summary>
            Given an artist browse object, return one of its tracks
            </summary>
            <param name="browsePtr">Album browse object</param>
            <param name="index">The index for the track. Should be in the interval [0, sp_artistbrowse_num_tracks() - 1]</param>
            <returns>A track object, or NULL if the index is out of range.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_num_albums(System.IntPtr)">
            <summary>
            Given an artist browse object, return number of albums
            </summary>
            <param name="artistBrowsePtr">Artist browse object</param>
            <returns>Number of albums for given artist</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_album(System.IntPtr,System.Int32)">
            <summary>
            Given an artist browse object, return one of its albums
            </summary>
            <param name="browsePtr">Album browse object</param>
            <param name="index">The index for the album. Should be in the interval [0, sp_artistbrowse_num_albums() - 1]</param>
            <returns>A track object, or NULL if the index is out of range.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_num_similar_artists(System.IntPtr)">
            <summary>
            Given an artist browse object, return number of similar artists
            </summary>
            <param name="artistBrowsePtr">Artist browse object</param>
            <returns>Number of similar artists for given artist</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_similar_artist(System.IntPtr,System.Int32)">
            <summary>
            Given an artist browse object, return a similar artist by index
            </summary>
            <param name="browsePtr">Album browse object</param>
            <param name="index"> The index for the artist. Should be in the interval [0, sp_artistbrowse_num_similar_artists() - 1]</param>
            <returns>A pointer to an artist object.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_biography(System.IntPtr)">
            <summary>
            Given an artist browse object, return the artists biography
            
            This function must be called from the same thread that did sp_session_create()
            </summary>
            <param name="browsePtr">Artist browse object</param>
            <returns>Biography string in UTF-8 format. Returned string is valid as long as the album object stays allocated and no longer than the next call to sp_session_process_events()</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_add_ref(System.IntPtr)">
            <summary>
            Increase the reference count of an artist browse result
            </summary>
            <param name="browsePtr"> Album artist object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_release(System.IntPtr)">
            <summary>
            Decrease the reference count of an artist browse result
            </summary>
            <param name="browsePtr"> artist browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_backend_request_duration(System.IntPtr)">
            <summary>
            Return the time (in ms) that was spent waiting for the Spotify backend to serve the request
            
            -1 if the request was served from the local cache
            If the result is not yet loaded the return value is undefined
            </summary>
            <param name="browsePtr"> artist browse object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_num_tophit_tracks(System.IntPtr)">
            <summary>
            Given an artist browse object, return number of tophit tracks
            This is a set of tracks for the artist with highest popularity
            </summary>
            <param name="browsePtr"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_artistbrowse_tophit_track(System.IntPtr,System.Int32)">
            <summary>
            Given an artist browse object, return one of its tophit tracks
            This is a set of tracks for the artist with highest popularity
            </summary>
            <param name="browsePtr"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_error_message(Torshify.Error)">
            <summary>
            Convert a numeric libspotify error code to a text string.
            </summary>
            <param name="error">The error code.</param>
            <returns>The text-representation of the error.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_create(System.IntPtr,System.Byte[])">
            <summary>
            Create an image object.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="idPtr">Spotify image ID.</param>
            <returns>Pointer to an image object. To free the object, use <c>sp_image_release()</c>.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_create_from_link(System.IntPtr,System.IntPtr)">
            <summary>
            Create an image object from a link
            
            </summary>
            <param name="sessionptr">Session</param>
            <param name="linkPtr">Spotify link object. This must be of SP_LINKTYPE_IMAGE type</param>
            <returns>Pointer to an image object. To free the object, use sp_image_release()</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_add_load_callback(System.IntPtr,Torshify.Core.Native.NativeImage.ImageLoadedCallback,System.IntPtr)">
            <summary>
            Add a callback that will be invoked when the image is loaded.
            If an image is loaded, and loading fails, the image will behave like an empty image.
            </summary>
            <param name="imagePtr">The image.</param>
            <param name="callbackPtr">Callback that will be called when image has been fetched.</param>
            <param name="userdataPtr">Opaque pointer passed to <c>callback</c>.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_remove_load_callback(System.IntPtr,Torshify.Core.Native.NativeImage.ImageLoadedCallback,System.IntPtr)">
            <summary>
            Remove an image load callback previously added with libspotify.sp_image_add_load_callback.
            </summary>
            <param name="imagePtr">The image.</param>
            <param name="callbackPtr">Callback that will not be called when image has been fetched.</param>
            <param name="userdataPtr">Opaque pointer passed to <c>callback</c></param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_is_loaded(System.IntPtr)">
            <summary>
            Check if an image is loaded. Before the image is loaded,
            the rest of the methods will behave as if the image is empty.
            </summary>
            <param name="imagePtr">Image object.</param>
            <returns>True if image is loaded, false otherwise.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_error(System.IntPtr)">
            <summary>
            Check if image retrieval returned an error code.
            </summary>
            <param name="imagePtr">Image object.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_format(System.IntPtr)">
            <summary>
            Get image format.
            </summary>
            <param name="imagePtr">Image object.</param>
            <returns>Image format as described by <see cref="T:Torshify.ImageFormat"/>.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_data(System.IntPtr,System.IntPtr@)">
            <summary>
            Get image data.
            </summary>
            <param name="imagePtr">Image object.</param>
            <param name="sizePtr">Size of raw image data.</param>
            <returns>Pointer to raw image data.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_image_id(System.IntPtr)">
            <summary>
            Get image ID.
            </summary>
            <param name="imagePtr">Image object.</param>
            <returns>Image ID.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_add_ref(System.IntPtr)">
            <summary>
            Increase the reference count of an image.
            </summary>
            <param name="imagePtr">The image.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_image_release(System.IntPtr)">
            <summary>
            Decrease the reference count of an image.
            </summary>
            <param name="imagePtr">The image.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_string(System.String)">
            <summary>
            Create a Spotify link given a string
            </summary>
            <remarks>You need to release the link when you are done with it.</remarks>
            <param name="link">A string representation of a Spotify link</param>
            <returns>A link representation of the given string representation. If the link could not be parsed, this function returns NULL.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_artist(System.IntPtr)">
            <summary>
            Creates a link object from an artist.
            </summary>
            <remarks>You need to release the link when you are done with it.</remarks>
            <param name="artistPtr">The artist.</param>
            <returns>A link object representing the artist.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_track(System.IntPtr,System.Int32)">
            <summary>
            Creates a link object from a track.
            </summary>
            <remarks>You need to release the link when you are done with it.</remarks>
            <param name="trackPtr">The track.</param>
            <param name="offset">The offset</param>
            <returns>A link object representing the track.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_album(System.IntPtr)">
            <summary>
            Creates a link object from an album.
            </summary>
            <remarks>You need to release the link when you are done with it.</remarks>
            <param name="albumPtr">The album.</param>
            <returns>A link object representing the track.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_search(System.IntPtr)">
            <summary>
            Creates a link object from a search.
            </summary>
            <remarks>You need to release the link when you are done with it.</remarks>
            <param name="searchPtr">The search.</param>
            <returns>A link object representing the search.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_playlist(System.IntPtr)">
            <summary>
            Creates a link object from a playlist.
            </summary>
            <remarks>You need to release the link when you are done with it.</remarks>
            <param name="playlistPtr">The playlist.</param>
            <returns>A link object representing the playlist.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_user(System.IntPtr)">
            <summary>
            Creates a link object from a user.
            </summary>
            <remarks>You need to release the link when you are done with it.</remarks>
            <param name="userPtr">The user.</param>
            <returns>A link object representing the user.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_album_cover(System.IntPtr,Torshify.ImageSize)">
            <summary>
            Create an image link object from an album
            </summary>
            <param name="albumPtr">An album object</param>
            <returns>A link representing the album cover. Type is set to SP_LINKTYPE_IMAGE</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_artistbrowse_portrait(System.IntPtr,System.Int32)">
            <summary>
            Creates a link object from an artist portrait
            
            You need to release the link when you are done with it.
            @see sp_link_release()
            @sp_artistbrowse_num_portraits()
            </summary>
            <param name="artistBrowsePtr">Artist browse object</param>
            <param name="index">The index of the portrait. Should be in the interval [0, sp_artistbrowse_num_portraits() - 1]</param>
            <returns> A link object representing an image</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_artist_portrait(System.IntPtr,Torshify.ImageSize)">
            <summary>
            Creates a link object pointing to an artist portrait
            </summary>
            <param name="artistPtr">Artist browse object</param>
            <returns>A link object representing an image</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_create_from_image(System.IntPtr)">
            <summary>
            Create a link object representing the given image
            
            A link representing the image.
            @note You need to release the link when you are done with it.
            @see sp_link_release()
            </summary>
            <param name="imagePtr">Image object</param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_as_string(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            Create a string representation of the given Spotify link.
            </summary>
            <param name="linkPtr">The Spotify link whose string representation you are interested in.</param>
            <param name="bufferPtr">The buffer to hold the string representation of link.</param>
            <param name="buffer_size">The max size of the buffer that will hold the string representation.
            The resulting string is guaranteed to always be null terminated if buffer_size &gt; 0.</param>
            <returns>The number of characters in the string representation of the link.
            If this value is greater or equal than buffer_size, output was truncated.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_type(System.IntPtr)">
            <summary>
            Gets the link type of the specified link.
            </summary>
            <param name="linkPtr">The link.</param>
            <returns>The link type of the specified link - see the SpotifyLinkType enum for possible values.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_as_track(System.IntPtr)">
            <summary>
            The track representation for the given link.
            </summary>
            <param name="linkPtr">The Spotify link whose track you are interested in.</param>
            <returns>The track representation of the given track link.
            If the link is not of track type then NULL is returned.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_as_track_and_offset(System.IntPtr,System.Int32@)">
            <summary>
            The track and offset into track representation for the given link.
            </summary>
            <param name="linkPtr">The Spotify link whose track you are interested in.</param>
            <param name="offsetPtr">The offset into track (in seconds). If the link does not contain an offset this will be set to 0.</param>
            <returns>The track representation of the given track link If the link is not of track type then NULL is returned.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_as_album(System.IntPtr)">
            <summary>
            The album representation for the given link.
            </summary>
            <param name="linkPtr">The Spotify link whose album you are interested in.</param>
            <returns>The album representation of the given album link.
            If the link is not of album type then NULL is returned.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_as_artist(System.IntPtr)">
            <summary>
            The artist representation for the given link.
            </summary>
            <param name="linkPtr">The Spotify link whose artist you are interested in.</param>
            <returns>The artist representation of the given link.
            If the link is not of artist type then NULL is returned.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_as_user(System.IntPtr)">
            <summary>
            The user representation for the given link
            </summary>
            <param name="linkPtr">The Spotify link whose user you are interested in</param>
            <returns>The user representation of the given link</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_add_ref(System.IntPtr)">
            <summary>
            Adds a reference to the specified link.
            </summary>
            <param name="linkPtr">The link.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_link_release(System.IntPtr)">
            <summary>
            Releases the specified link.
            </summary>
            <param name="linkPtr">The link.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_is_loaded(System.IntPtr)">
            <summary>
            Get load status for the specified playlist. If it's false, you have to wait until playlist_state_changed happens,
            and check again if is_loaded has changed.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <returns>True if playlist is loaded, otherwise false.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_add_callbacks(System.IntPtr,Torshify.Core.Native.Spotify.PlaylistCallbacks@,System.IntPtr)">
            <summary>
            Register interest in the given playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="callbacksPtr">Callbacks, see sp_playlist_callbacks.</param>
            <param name="userdataPtr">Userdata to be passed to callbacks.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_remove_callbacks(System.IntPtr,Torshify.Core.Native.Spotify.PlaylistCallbacks@,System.IntPtr)">
            <summary>
            Unregister interest in the given playlist.
            The combination of (callbacks, userdata) is used to find the entry to be removed.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="callbacksPtr">Callbacks, see sp_playlist_callbacks.</param>
            <param name="userdataPtr">Userdata to be passed to callbacks.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_num_tracks(System.IntPtr)">
            <summary>
            Return number of tracks in the given playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <returns>The number of tracks in the playlist.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_track(System.IntPtr,System.Int32)">
            <summary>
            Return the track at the given index in a playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="index">Index into playlist container. Should be in the interval [0, sp_playlist_num_tracks() - 1].</param>
            <returns>The track at the given index.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_track_create_time(System.IntPtr,System.Int32)">
            <summary>
            Return when the given index was added to the playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="index">Index into playlist container. Should be in the interval [0, sp_playlist_num_tracks() - 1].</param>
            <returns>Time, Seconds since unix epoch.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_track_creator(System.IntPtr,System.Int32)">
            <summary>
            Return user that added the given index in the playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="index">Index into playlist container. Should be in the interval [0, sp_playlist_num_tracks() - 1].</param>
            <returns>User object.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_track_seen(System.IntPtr,System.Int32)">
            <summary>
            Return if a playlist entry is marked as seen or not.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="index">Index into playlist container. Should be in the interval [0, sp_playlist_num_tracks() - 1].</param>
            <returns>Seen state.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_name(System.IntPtr)">
            <summary>
            Return name of given playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <returns>The name of the given playlist.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_rename(System.IntPtr,System.String)">
            <summary>
            Rename the given playlist The name must not consist of only spaces and it must be shorter than 256 characters.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="newName">New name for playlist.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_owner(System.IntPtr)">
            <summary>
            Return a pointer to the user for the given playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <returns>User object.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_is_collaborative(System.IntPtr)">
            <summary>
            Return collaborative status for a playlist.
            A playlist in collaborative state can be modifed by all users, not only the user owning the list.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <returns>true if playlist is collaborative, otherwise false.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_set_collaborative(System.IntPtr,System.Boolean)">
            <summary>
            Set collaborative status for a playlist.
            A playlist in collaborative state can be modifed by all users, not only the user owning the list.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="collaborative">Wheater or not the playlist should be collaborative.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_set_autolink_tracks(System.IntPtr,System.Boolean)">
            <summary>
            Set autolinking state for a playlist.
            If a playlist is autolinked, unplayable tracks will be made playable by linking them to other Spotify tracks, where possible.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="link">The new value.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_get_description(System.IntPtr)">
            <summary>
            Get description for a playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <returns>Description</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_get_image(System.IntPtr,System.IntPtr)">
            <summary>
            Get image for a playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="imageId">[out] 20 byte image id.</param>
            <returns>True if playlist has an image, otherwise false.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_has_pending_changes(System.IntPtr)">
            <summary>
            Check if a playlist has pending changes.
            Pending changes are local changes that have not yet been acknowledged by the server.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <returns>A flag representing if there are pending changes or not.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_add_tracks(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Add tracks to a playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="trackArrayPtr">Array of pointer to tracks.</param>
            <param name="numTracks">Count of <c>tracks</c> array.</param>
            <param name="position">Start position in playlist where to insert the tracks.</param>
            <param name="sessionPtr">Your session object.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_remove_tracks(System.IntPtr,System.Int32[],System.Int32)">
            <summary>
            Remove tracks from a playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="trackIndices">Array of pointer to track indices.
            A certain track index should be present at most once, e.g. [0, 1, 2] is valid indata, whereas [0, 1, 1] is invalid.</param>
            <param name="numTracks">Count of <c>trackIndices</c> array.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_reorder_tracks(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Move tracks in playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
            <param name="trackIndices">Array of pointer to track indices to be moved.
            A certain track index should be present at most once, e.g. [0, 1, 2] is valid indata, whereas [0, 1, 1] is invalid.</param>
            <param name="numTracks">Count of <c>trackIndices</c> array.</param>
            <param name="newPosition">New position for tracks.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_num_subscribers(System.IntPtr)">
            <summary>
            Return number of subscribers for a given playlist
            </summary>
            <param name="playlistPtr">The playlist object.</param>
            <returns>Number of subscribers</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_subscribers(System.IntPtr)">
            <summary>
            Return subscribers for a playlist
            </summary>
            <param name="playlistPtr">The playlist object.</param>
            <returns>sp_subscribers struct with array of canonical usernames. This object should be free'd using sp_playlist_subscribers_free()</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_subscribers_free(System.IntPtr)">
            <summary>
            Free object returned from sp_playlist_subscribers()
            </summary>
            <param name="subscribersPtr">The Subscribers object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_update_subscribers(System.IntPtr,System.IntPtr)">
            <summary>
            Ask library to update the subscription count for a playlist
            
            When the subscription info has been fetched from the Spotify backend
            the playlist subscribers_changed() callback will be invoked.
            In that callback use sp_playlist_num_subscribers() and/or
            sp_playlist_subscribers() to get information about the subscribers.
            You can call those two functions anytime you want but the information
            might not be up to date in such cases
            </summary>
            <param name="sessionPtr">The session object</param>
            <param name="playlistPtr">Playlist object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_create(System.IntPtr,System.IntPtr)">
            <summary>
            Load an already existing playlist without adding it to a playlistcontainer.
            </summary>
            <param name="sessionPtr">Session object.</param>
            <param name="linkPtr">Link object referring to a playlist.</param>
            <returns>A playlist. The reference is owned by the caller and should be released with sp_playlist_release().</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_add_ref(System.IntPtr)">
            <summary>
            Increase the reference count of a playlist.
            </summary>
            <param name="playlistPtr">Playlist object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_release(System.IntPtr)">
            <summary>
            Decrease the reference count of a playlist.
            </summary>
            <param name="playlistPtr">The playlist object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_set_offline_mode(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Mark a playlist to be synchronized for offline playback
            </summary>
            <param name="sessionPtr">Session object</param>
            <param name="playlistPtr">Playlist object</param>
            <param name="offline">True if playlist should be offline, false otherwise</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_get_offline_status(System.IntPtr,System.IntPtr)">
            <summary>
            Get offline status for a playlist
            
            When in SP_PLAYLIST_OFFLINE_STATUS_DOWNLOADING mode the
            sp_playlist_get_offline_download_completed() method can be used to query
            progress of the download
            </summary>
            <param name="sessionPtr">Session object</param>
            <param name="playlistPtr">Playlist object</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_get_offline_download_completed(System.IntPtr,System.IntPtr)">
            <summary>
            Get download progress for an offline playlist
            </summary>
            <param name="sessionPtr">Session object</param>
            <param name="playlistPtr">Playlist object</param>
            <returns>Value from 0 - 100 that indicates amount of playlist that is downloaded</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_is_in_ram(System.IntPtr,System.IntPtr)">
            <summary>
            Return whether a playlist is loaded in RAM (as opposed to onl stored on disk)
            </summary>
            <param name="sessionPtr"> </param>
            <param name="playlistPtr">Playlist object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlist_set_in_ram(System.IntPtr,System.IntPtr,System.Boolean)">
             <summary>
            Set whether a playlist is loaded in RAM (as opposed to only stored on disk)
             </summary>
             <param name="sessionPtr"> </param>
             <param name="playlistPtr">Playlist object.</param>
            <param name="inRam"> </param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_add_ref(System.IntPtr)">
            <summary>
            Increase reference count on playlistconatiner object
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_release(System.IntPtr)">
            <summary>
            Release reference count on playlistconatiner object
            </summary>
            <param name="pcPtr">Playlist container.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_is_loaded(System.IntPtr)">
            <summary>
            Return true if the playlistcontainer is fully loaded
            
            The container_loaded callback will be invoked when this flips to true
            </summary>
            <param name="pcPtr">Playlist container</param>
            <returns>True if container is loaded</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_add_callbacks(System.IntPtr,Torshify.Core.Native.NativePlaylistContainerCallbacks.PlaylistContainerCallbacks@,System.IntPtr)">
            <summary>
            Register interest in changes to a playlist container.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="callbacksPtr">Callbacks, see sp_playlistcontainer_callbacks.</param>
            <param name="userdataPtr">Opaque value passed to callbacks.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_remove_callbacks(System.IntPtr,Torshify.Core.Native.NativePlaylistContainerCallbacks.PlaylistContainerCallbacks@,System.IntPtr)">
            <summary>
            Unregister interest in changes to a playlist container.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="callbacksPtr">Callbacks, see sp_playlistcontainer_callbacks</param>
            <param name="userdataPtr">Opaque value passed to callbacks.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_num_playlists(System.IntPtr)">
            <summary>
            Return the number of playlists in the given playlist container.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <returns>Number of playlists, -1 if undefined.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_playlist(System.IntPtr,System.Int32)">
            <summary>
            Return a pointer to the playlist at a specific index.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="index">Index in playlist container. Should be in the interval [0, sp_playlistcontainer_num_playlists() - 1].</param>
            <returns>Number of playlists.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_playlist_type(System.IntPtr,System.Int32)">
            <summary>
            Return the type of the playlist at a index.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="index">Index in playlist container. Should be in the interval [0, sp_playlistcontainer_num_playlists() - 1].</param>
            <returns>Type of the playlist.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_playlist_folder_name(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Gets the name of the playlist folder.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="index">The playlist index.</param>
            <param name="buffer">Pointer to name-buffer.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_playlist_folder_id(System.IntPtr,System.Int32)">
            <summary>
            Return the folder id at index.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="index">Index in playlist container. Should be in the interval [0, sp_playlistcontainer_num_playlists() - 1].</param>
            <returns>The group ID.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_add_new_playlist(System.IntPtr,System.String)">
            <summary>
            Add an empty playlist at the end of the playlist container. The name must not consist of only spaces and it must be shorter than 256 characters.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="name">Name of new playlist.</param>
            <returns>Pointer to the new playlist. Can be null if the operation fails.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_add_folder(System.IntPtr,System.Int32,System.String)">
            <summary>
            Add a playlist folder
            
            This operation will actually create two playlists. One of type SP_PLAYLIST_TYPE_START_FOLDER and immediately following a SP_PLAYLIST_TYPE_END_FOLDER one.
            
            To remove a playlist folder both of these must be deleted or the list will be left in an inconsistant state.
            
            There is no way to rename a playlist folder. Instead you need to remove the folder and recreate it again.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="name">Name of new playlist.</param>
            <returns>Pointer to the new playlist. Can be null if the operation fails.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_add_playlist(System.IntPtr,System.IntPtr)">
            <summary>
            Add an existing playlist at the end of the given playlist container.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="linkPtr">Link object pointing to a playlist.</param>
            <returns>Pointer to the new playlist. Will be null if the playlist already exists.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_remove_playlist(System.IntPtr,System.Int32)">
            <summary>
            Remove playlist at index from the given playlist container.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="index">Index of playlist to be removed.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_move_playlist(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Move a playlist in the playlist container.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <param name="index">Index of playlist to be moved.</param>
            <param name="newPosition">New position for the playlist.</param>
            <param name="dryRun">Do not execute the move, only check if it possible</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_owner(System.IntPtr)">
            <summary>
            Returns a pointer to the user object of the owner.
            </summary>
            <param name="pcPtr">Playlist container.</param>
            <returns>The user object or null if unknown or none.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_get_unseen_tracks(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Get the number of new tracks in a playlist since the corresponding
            function sp_playlistcontainer_clear_unseen_tracks() was called. The
            function always returns the number of new tracks, and fills the
            tracks array with the new tracks, but not more than specified in
            num_tracks. The function will return a negative value on failure.
            </summary>
            <param name="pcPtr"></param>
            <param name="playlistPtr"></param>
            <param name="tracks"></param>
            <param name="maxNumberOfTracks"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_playlistcontainer_clear_unseen_tracks(System.IntPtr,System.IntPtr)">
            <summary>
            Clears a playlist from unseen tracks, so that next call to sp_playlistcontainer_get_unseen_tracks() will return 0 until a new track is added to the \p playslist.
            </summary>
            <param name="pcPtr"></param>
            <param name="playlistPtr"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_create(System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Torshify.SearchType,System.IntPtr,System.IntPtr)">
            <summary>
            Create a search object from the given query.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="query">Query search string, e.g. 'The Rolling Stones' or 'album:"The Black Album"'</param>
            <param name="track_offset">The offset among the tracks of the result.</param>
            <param name="track_count">The number of tracks to ask for.</param>
            <param name="album_offset">The offset among the albums of the result.</param>
            <param name="album_count">The number of albums to ask for.</param>
            <param name="artist_offset">The offset among the artists of the result.</param>
            <param name="artist_count">The number of artists to ask for.</param>
            <param name="search_type">Type of search, can be used for suggest searches </param>
            <param name="callbackPtr">Callback that will be called once the search operation is complete.
            Pass null if you are not interested in this event.</param>
            <param name="userdataPtr">Opaque pointer passed to callback.</param>
            <param name="playlist_offset">The offset among the playlists of the results </param>
            <param name="playlist_count">The number of playlists to ask for </param>
            <returns>Pointer to a search object. To free the object, use <c>sp_search_release()</c></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_is_loaded(System.IntPtr)">
            <summary>
            Get load status for the specified search. Before it is loaded, it will behave as an empty search result.
            </summary>
            <param name="searchPtr">A search object.</param>
            <returns>True if search is loaded, otherwise false.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_error(System.IntPtr)">
            <summary>
            Check if search returned an error code.
            </summary>
            <param name="searchPtr">A search object.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_num_tracks(System.IntPtr)">
            <summary>
            Get the number of tracks for the specified search.
            </summary>
            <param name="searchPtr">A serach object.</param>
            <returns>The number of tracks for the specified search.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_track(System.IntPtr,System.Int32)">
            <summary>
            Return the track at the given index in the given search object.
            </summary>
            <param name="searchPtr">A search object.</param>
            <param name="index">Index of the wanted track. Should be in the interval [0, <c>sp_search_num_tracks()</c> - 1]</param>
            <returns>The track at the given index in the given search object.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_num_albums(System.IntPtr)">
            <summary>
            Get the number of albums for the specified search.
            </summary>
            <param name="searchPtr">A serach object.</param>
            <returns>The number of albums for the specified search.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_album(System.IntPtr,System.Int32)">
            <summary>
            Return the album at the given index in the given search object.
            </summary>
            <param name="searchPtr">A search object.</param>
            <param name="index">Index of the wanted album. Should be in the interval [0, <c>sp_search_num_albums()</c> - 1]</param>
            <returns>The album at the given index in the given search object.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_num_artists(System.IntPtr)">
            <summary>
            Get the number of artists for the specified search.
            </summary>
            <param name="searchPtr">A serach object.</param>
            <returns>The number of artists for the specified search.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_artist(System.IntPtr,System.Int32)">
            <summary>
            Return the artist at the given index in the given search object.
            </summary>
            <param name="searchPtr">A search object.</param>
            <param name="index">Index of the wanted artist. Should be in the interval [0, <c>sp_search_num_artists()</c> - 1]</param>
            <returns>The artist at the given index in the given search object.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_query(System.IntPtr)">
            <summary>
            Return the search query for the given search object.
            </summary>
            <param name="searchPtr">A search object.</param>
            <returns>The search query for the given search object.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_did_you_mean(System.IntPtr)">
            <summary>
            Return the "Did you mean" query for the given search object.
            </summary>
            <param name="searchPtr">A search object.</param>
            <returns>The "Did you mean" query for the given search object, or the empty string if no such info is available.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_total_tracks(System.IntPtr)">
            <summary>
            Return the total number of tracks for the search query - regardless of the interval requested at creation.
            If this value is larger than the interval specified at creation of the search object, more search results
            are available. To fetch these, create a new search object with a new interval.
            </summary>
            <param name="searchPtr">A search object.</param>
            <returns>The total number of tracks matching the original query.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_total_albums(System.IntPtr)">
            <summary>
            Return the total number of albums for the search query - regardless of the interval requested at creation.
            If this value is larger than the interval specified at creation of the search object, more search results
            are available. To fetch these, create a new search object with a new interval.
            </summary>
            <param name="searchPtr">A search object.</param>
            <returns>The total number of albums matching the original query.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_total_artists(System.IntPtr)">
            <summary>
            Return the total number of artists for the search query - regardless of the interval requested at creation.
            If this value is larger than the interval specified at creation of the search object, more search results
            are available. To fetch these, create a new search object with a new interval.
            </summary>
            <param name="searchPtr">A search object.</param>
            <returns>The total number of artists matching the original query.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_add_ref(System.IntPtr)">
            <summary>
            Increase the reference count of a search result.
            </summary>
            <param name="searchPtr">A serach object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_release(System.IntPtr)">
            <summary>
            Decrease the reference count of a search result.
            </summary>
            <param name="searchPtr">A search object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_num_playlists(System.IntPtr)">
            <summary>
            Get the number of playlists for the specified search
            </summary>
            <param name="searchPtr"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_total_playlists(System.IntPtr)">
            <summary>
            Return the total number of playlists for the search query - regardless of the interval requested at creation.
            If this value is larger than the interval specified at creation of the search object, more search results are available.
            To fetch these, create a new search object with a new interval.
            </summary>
            <param name="searchPtr"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_playlist_name(System.IntPtr,System.Int32)">
            <summary>
            Return the playlist at the given index in the given search object
            </summary>
            <param name="searchPtr"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_playlist_uri(System.IntPtr,System.Int32)">
            <summary>
            Return the uri of a playlist at the given index in the given search object
            </summary>
            <param name="searchPtr"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_search_playlist_image_uri(System.IntPtr,System.Int32)">
            <summary>
            Return the image_uri of a playlist at the given index in the given search object
            </summary>
            <param name="searchPtr"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_build_id">
            <summary>
            Return the libspotify build ID
            This might be useful to have available for display somewhere in your user interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_create(Torshify.Core.Native.Spotify.SpotifySessionConfig@,System.IntPtr@)">
            <summary>
            Initialize a session. The session returned will be initialized, but you will need to log in before you can perform any other operation.
            </summary>
            <param name="config">The configuration to use for the session.</param>
            <param name="sessionPtr">If successful, a new session - otherwise null.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_release(System.IntPtr)">
            <summary>
            Release the session. This will clean up all data and connections associated with the session.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_login(System.IntPtr,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Logs in the specified username/password combo. This initiates the download in the background. A callback is called when login is complete.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="username">The username to log in.</param>
            <param name="password">The password for the specified username.</param>
            <param name="rememberMe">If set, the username / password will be remembered by libspotify</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_relogin(System.IntPtr)">
            <summary>
            Log in the remembered user if last user that logged in logged in with remember_me set.
            If no credentials are stored, this will return SP_ERROR_NO_CREDENTIALS.
            </summary>
            <param name="sessionPtr">Your session object</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_remembered_user(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            Get username of the user that will be logged in via sp_session_relogin()
            </summary>
            <param name="linkPtr">Your session object</param>
            <param name="bufferPtr">The buffer to hold the username</param>
            <param name="buffer_size">The max size of the buffer that will hold the username. The resulting string is guaranteed to always be null terminated if buffer_size > 0</param>
            <returns> The number of characters in the username. If value is greater or equal than \p buffer_size, output was truncated. If returned value is -1 no credentials are stored in libspotify.*/</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_forget_me(System.IntPtr)">
            <summary>
            Remove stored credentials in libspotify. If no credentials are currently stored, nothing will happen.
            </summary>
            <param name="sessionPtr">Your session object</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_logout(System.IntPtr)">
            <summary>
            Logs out the currently logged in user.
            </summary>
            <remarks>
            Always call this before terminating the application and libspotify is currently logged in. Otherwise, the settings and cache may be lost.
            </remarks>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_connectionstate(System.IntPtr)">
            <summary>
            Gets the connection state of the specified session.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <returns>The connection state.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_set_cache_size(System.IntPtr,System.UInt32)">
            <summary>
            Set maximum cache size.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="size">Maximum cache size in megabytes. Setting it to 0 (the default) will let libspotify automatically resize the cache (10% of disk free space).</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_process_events(System.IntPtr,System.Int32@)">
            <summary>
            Make the specified session process any pending events.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="nextTimeout">Stores the time (in milliseconds) until you should call this function again.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_player_load(System.IntPtr,System.IntPtr)">
            <summary>
            Loads the specified track.
            After successfully loading the track, you have the option of running sp_session_player_play() directly,
            or using sp_session_player_seek() first. When this call returns, the track will have been loaded,
            unless an error occurred.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="track">Track object from playlist or search.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_player_seek(System.IntPtr,System.Int32)">
            <summary>
            Seek to position in the currently loaded track.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="offset">Track position, in milliseconds.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_player_play(System.IntPtr,System.Boolean)">
            <summary>
            PlayerPlay or pause the currently loaded track.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="play">If set to true, playback will occur. If set to false, the playback will be paused.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_player_unload(System.IntPtr)">
            <summary>
            Stops the currently playing track.
            This frees some resources held by libspotify to identify the currently playing track.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_player_prefetch(System.IntPtr,System.IntPtr)">
            <summary>
            Prefetch a track.
            Instruct libspotify to start loading of a track into its cache. This could be done by an application just before the current track ends.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="track">The track to be prefetched.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_playlistcontainer(System.IntPtr)">
            <summary>
            Returns the playlist container for the currently logged in user.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <returns>Playlist container object, NULL if not logged in.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_inbox_create(System.IntPtr)">
            <summary>
            Returns an inbox playlist for the currently logged in user.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <returns>A playlist.</returns>
            <remarks>You need to release the playlist when you are done with it.</remarks>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_starred_create(System.IntPtr)">
            <summary>
            Returns the starred list for the current user.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <returns>A playlist.</returns>
            <remarks>You need to release the playlist when you are done with it.</remarks>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_starred_for_user_create(System.IntPtr,System.String)">
            <summary>
            Returns the starred list for a user.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="username">Canonical username.</param>
            <returns>A playlist.</returns>
            <remarks>You need to release the playlist when you are done with it.</remarks>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_publishedcontainer_for_user_create(System.IntPtr,System.String)">
            <summary>
            Return the published container for a given canonical_username, or the currently logged in user if canonical_username is null.
            The container can be released when you're done with it, using <c>sp_session_publishedcontainer_fo_user_release()</c>, or it will be released when calling <c>sp_session_logout()</c>.
            Subsequent requests for a published container will return the same object, unless it has been released previously.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="username">Canonical username.</param>
            <returns>Playlist container object, null if not logged in or not found. </returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_preferred_bitrate(System.IntPtr,Torshify.Bitrate)">
            <summary>
            Set preferred bitrate for music streaming.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="bitrate">Preferred bitrate.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_preferred_offline_bitrate(System.IntPtr,Torshify.Bitrate,System.Boolean)">
            <summary>
            Set preferred bitrate for offline sync
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="bitrate">Preferred bitrate, see ::sp_bitrate for possible values.</param>
            <param name="allowResync">Set to true if libspotify should resynchronize already synchronized tracks. Usually you should set this to false.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_set_connection_type(System.IntPtr,Torshify.ConnectionType)">
            <summary>
            Set to true if the connection is currently routed over a roamed connectivity
            
            Used in conjunction with sp_session_set_connection_rules() to control
            how libspotify should behave in respect to network activity and offline synchronization.
            </summary>
            <param name="sessionPtr">Session object</param>
            <param name="connectionType">Connection type</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_set_connection_rules(System.IntPtr,Torshify.ConnectionRule)">
            <summary>
            Set rules for how libspotify connects to Spotify servers and synchronizes offline content.
            
            Used in conjunction with sp_session_set_connection_type() to control
            how libspotify should behave in respect to network activity and offline synchronization.
            </summary>
            <param name="sessionPtr"></param>
            <param name="connectionRule"></param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_offline_tracks_to_sync(System.IntPtr)">
            <summary>
            Get total number of tracks that needs download before everything
            from all playlists that is marked for offline is fully synchronized
            </summary>
            <param name="sessionPtr">Session object</param>
            <returns>Number of tracks</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_offline_num_playlists(System.IntPtr)">
            <summary>
            Return number of playlisys that is marked for offline synchronization
            
            
            </summary>
            <param name="sessionPtr">Session object</param>
            <returns>Number of playlists</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_offline_sync_get_status(System.IntPtr,Torshify.Core.Native.Spotify.SpotifyOfflineSyncStatus@)">
            <summary>
            Return offline synchronization status. When the internal status is
            updated the offline_status_updated() callback will be invoked.
            </summary>
            <param name="sessionPtr">Session object</param>
            <param name="connectionRule">Status object that will be filled with info</param>
            <returns>false if no synching is in progress (in which case the contents of status is undefined)</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_offline_time_left(System.IntPtr)">
            <summary>
            Return remaining time (in seconds) until the offline key store expires and the user is required to relogin
            </summary>
            <param name="sessionPtr"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_user(System.IntPtr)">
            <summary>
            Fetches the currently logged in user.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <returns>The logged in user (or null if not logged in).</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_user_data(System.IntPtr)">
            <summary>
            The userdata associated with the session.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <returns>The userdata that was passed in on session creation.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_user_name(System.IntPtr)">
            <summary>
            Get a string representing the user's login username
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Torshify.Core.Native.Spotify.sp_session_user_country(System.IntPtr)" -->
        <member name="M:Torshify.Core.Native.Spotify.sp_session_get_volume_normalization(System.IntPtr)">
            <summary>
            Return status of volume normalization
            </summary>
            <param name="sessionPtr">Session object</param>
            <returns>true if volume normalization is enabled</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_set_volume_normalization(System.IntPtr,System.Boolean)">
            <summary>
            Set volume normalization
            </summary>
            <param name="sessionPtr">Session object</param>
            <param name="on">True if volume normalization should be enabled</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_flush_caches(System.IntPtr)">
            <summary>
            This will make libspotify write all data that is meant to be stored
            on disk to the disk immediately. libspotify does this periodically
            by itself and also on logout. So under normal conditions this
            should never need to be used.
            </summary>
            <param name="sessionPtr"></param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_set_private_session(System.IntPtr,System.Boolean)">
            <summary>
            Set if private session is enabled. This disables sharing what the user is listening to
            to services such as Spotify Social, Facebook and LastFM. The private session will
            last for a time, and then libspotify will revert to the normal state. The private
            session is prolonged by user activity.
            </summary>
            <param name="sessionPtr"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_is_private_session(System.IntPtr)">
            <summary>
            Return True if private session is enabled
            </summary>
            <param name="sessionPtr"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_set_scrobbling(System.IntPtr,Torshify.SocialProvider,Torshify.ScrobblingState)">
            <summary>
            Set if scrobbling is enabled. This api allows setting local overrides of the global scrobbling settings.
            Changing the global settings are currently not supported.
            </summary>
            <param name="sessionPtr"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_is_scrobbling(System.IntPtr,Torshify.SocialProvider,Torshify.ScrobblingState)">
            <summary>
            Return the scrobbling state. This makes it possible to find out if scrobbling is locally overrided or
            if the global setting is used
            </summary>
            <param name="sessionPtr"></param>
            <param name="socialProvider"></param>
            <param name="scrobblingState"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_is_scrobbling_possible(System.IntPtr,Torshify.SocialProvider,System.Boolean@)">
            <summary>
            Return True if scrobbling settings should be shown to the user. Currently this setting is relevant
            only to the facebook provider.
            The returned value may be false if the user is not connected to facebook,
            or if the user has opted out from facebook social graph.
            </summary>
            <param name="sessionPtr"></param>
            <param name="socialProvider"></param>
            <param name="isPossible"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_session_set_social_credentials(System.IntPtr,Torshify.SocialProvider,System.String,System.String)">
            <summary>
            Set the user's credentials with a social provider.
            Currently this is only relevant for LastFm
            Call sp_session_set_scrobbling to force an authentication attempt
            with the LastFm server. If authentication fails a scrobble_error callback will be sent.
            </summary>
            <param name="sessionPtr"></param>
            <param name="socialProvider"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_is_loaded(System.IntPtr)">
            <summary>
            Get load status for the specified track. If the track is not loaded yet, all other functions operating on the track return default values.
            </summary>
            <param name="albumPtr">The track whose load status you are interested in.</param>
            <returns>True if track is loaded, otherwise false.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_error(System.IntPtr)">
            <summary>
            Return an error code associated with a track. For example if it could not load.
            </summary>
            <param name="trackPtr"></param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_get_availability(System.IntPtr,System.IntPtr)">
            <summary>
            Return availability for a track
            </summary>
            <param name="sessionPtr"></param>
            <param name="trackPtr"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_offline_get_status(System.IntPtr)">
            <summary>
            Return offline status for a track. sp_session_callbacks::metadata_updated() will be invoked when
            offline status of a track changes
            </summary>
            <param name="trackPtr"></param>
            <returns></returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_is_placeholder(System.IntPtr)">
            <summary>
            Return true if the track is a placeholder. Placeholder tracks are used
            to store other objects than tracks in the playlist. Currently this is
             used in the inbox to store artists, albums and playlists.
            
            Use sp_link_create_from_track() to get a link object that points
            to the real object this "track" points to.
            
            Contrary to most functions the track does not have to be
            loaded for this function to return correct value
            </summary>
            <param name="trackPtr"></param>
            <returns>True if track is a placeholder</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_is_local(System.IntPtr,System.IntPtr)">
            <summary>
            Return true if the track is a local file.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="trackPtr">The track.</param>
            <remarks>The track must be loaded or this function will always return false.
            <seealso cref="M:Torshify.Core.Native.Spotify.sp_track_is_loaded(System.IntPtr)"/>
            </remarks>
            <returns>True if track is a local file, otherwise false.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_is_autolinked(System.IntPtr,System.IntPtr)">
            <summary>
            Return true if the track is autolinked to another track.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="albumPtr">The track.</param>
            <remarks>The track must be loaded or this function will always return false.
            </remarks>
            <returns>True if track is autolinked, otherwise false.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_is_starred(System.IntPtr,System.IntPtr)">
            <summary>
            Return true if the track is starred by the currently logged in user.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="albumPtr">The track.</param>
            <remarks>The track must be loaded or this function will always return false.
            </remarks>
            <returns>True if track is a starred file, otherwise false.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_set_starred(System.IntPtr,System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Star/Unstar the specified tracks.
            </summary>
            <param name="sessionPtr">Session object returned from <c>sp_session_create</c>.</param>
            <param name="trackArrayPtr">An array of pointer to tracks.</param>
            <param name="num_tracks">Count of <c>trackArray</c>.</param>
            <param name="star">Starred status of the track.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_num_artists(System.IntPtr)">
            <summary>
            The number of artists performing on the specified track.
            </summary>
            <param name="albumPtr">The track whose number of participating artists you are interested in.</param>
            <returns>The number of artists performing on the specified track. If no metadata is available for the track yet, this function returns 0.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_artist(System.IntPtr,System.Int32)">
            <summary>
            The artist matching the specified index performing on the current track.
            </summary>
            <param name="albumPtr">The track whose participating artist you are interested in.</param>
            <param name="index">The index for the participating artist. Should be in the interval [0, <c>sp_track_num_artists()</c> - 1]</param>
            <returns>The participating artist, or NULL if invalid index.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_album(System.IntPtr)">
            <summary>
            The album of the specified track.
            </summary>
            <param name="albumPtr">A track object.</param>
            <returns>The album of the given track. You need to increase the refcount if you want to keep the pointer around. If no metadata is available for the track yet, this function returns 0.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_name(System.IntPtr)">
            <summary>
            The string representation of the specified track's name.
            </summary>
            <param name="albumPtr">A track object.</param>
            <returns>The string representation of the specified track's name.
            Returned string is valid as long as the album object stays allocated and
            no longer than the next call to <c>sp_session_process_events()</c>.
            If no metadata is available for the track yet, this function returns empty string. </returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_duration(System.IntPtr)">
            <summary>
            The duration, in milliseconds, of the specified track.
            </summary>
            <param name="albumPtr">A track object.</param>
            <returns>The duration of the specified track, in milliseconds If no metadata is available for the track yet, this function returns 0.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_popularity(System.IntPtr)">
            <summary>
            Returns popularity for track.
            </summary>
            <param name="albumPtr">A track object.</param>
            <returns>Popularity in range 0 to 100, 0 if undefined.
            If no metadata is available for the track yet, this function returns 0.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_disc(System.IntPtr)">
            <summary>
            Returns the disc number for a track.
            </summary>
            <param name="albumPtr">A track object.</param>
            <returns>Disc index. Possible values are [1, total number of discs on album].
            This function returns valid data only for tracks appearing in a browse artist or browse album result (otherwise returns 0).</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_index(System.IntPtr)">
            <summary>
            Returns the position of a track on its disc.
            </summary>
            <param name="albumPtr">A track object.</param>
            <returns>Track position, starts at 1 (relative the corresponding disc).
            This function returns valid data only for tracks appearing in a browse artist or browse album result (otherwise returns 0).</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_localtrack_create(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns the newly created local track.
            </summary>
            <param name="artist">Name of the artist.</param>
            <param name="title">Song title.</param>
            <param name="album">Name of the album, or an empty string if not available.</param>
            <param name="length">Count in MS, or -1 if not available.</param>
            <returns>A track.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_add_ref(System.IntPtr)">
            <summary>
            Increase the reference count of a track.
            </summary>
            <param name="albumPtr">The track object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_release(System.IntPtr)">
            <summary>
            Decrease the reference count of a track.
            </summary>
            <param name="albumPtr">The track object.</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_track_get_playable(System.IntPtr,System.IntPtr)">
            <summary>
            Return the actual track that will be played if the given track is played
            </summary>
            <returns>A track.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_user_canonical_name(System.IntPtr)">
            <summary>
            Get a pointer to a string representing the user's canonical username.
            </summary>
            <param name="user">The Spotify user whose canonical username you would like a string representation of</param>
            <returns> A string representing the canonical username.</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_user_display_name(System.IntPtr)">
            <summary>
            Get a pointer to a string representing the user's displayable username.
            If there is no difference between the canonical username and the display name,
            or if the library does not know about the display name yet, the canonical username will be returned.
            </summary>
            <param name="user">The Spotify user whose displayable username you would like a string representation of</param>
            <returns>A string</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_user_is_loaded(System.IntPtr)">
            <summary>
            Get load status for a user object. Before it is loaded, only the user's canonical username is known.
            </summary>
            <param name="user">Spotify user object</param>
            <returns>True if user object is loaded, otherwise false</returns>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_user_add_ref(System.IntPtr)">
            <summary>
            Increase the reference count of an user
            </summary>
            <param name="user">The user object</param>
        </member>
        <member name="M:Torshify.Core.Native.Spotify.sp_user_release(System.IntPtr)">
            <summary>
            Decrease the reference count of an user
            </summary>
            <param name="user">The user object</param>
        </member>
        <member name="F:Torshify.Core.Native.Spotify.SpotifyOfflineSyncStatus.QueuedTracks">
            Queued tracks is things left to sync in current sync
            operation
        </member>
        <member name="F:Torshify.Core.Native.Spotify.SpotifyOfflineSyncStatus.QueuedBytes">
            Queued bytes is things left to sync in current sync
            operation
        </member>
        <member name="F:Torshify.Core.Native.Spotify.SpotifyOfflineSyncStatus.DoneTracks">
            Done tracks is things marked for sync that existed on
            device before current sync operation
        </member>
        <member name="F:Torshify.Core.Native.Spotify.SpotifyOfflineSyncStatus.DoneBytes">
            Done bytes is things marked for sync that existed on
            device before current sync operation
        </member>
        <member name="F:Torshify.Core.Native.Spotify.SpotifyOfflineSyncStatus.CopiedTracks">
            Copied tracks/bytes is things that has been copied in
            current sync operation
        </member>
        <member name="F:Torshify.Core.Native.Spotify.SpotifyOfflineSyncStatus.CopiedBytes">
            Copied bytes is things that has been copied in
            current sync operation
        </member>
        <member name="F:Torshify.Core.Native.Spotify.SpotifyOfflineSyncStatus.WillNotCopyTracks">
            Tracks that are marked as synced but will not be copied
            (for various reasons)
        </member>
        <member name="F:Torshify.Core.Native.Spotify.SpotifyOfflineSyncStatus.ErrorTracks">
            A track is counted as error when something goes wrong while
            syncing the track
        </member>
        <member name="F:Torshify.Core.Native.Spotify.SpotifyOfflineSyncStatus.Syncing">
            Set if sync operation is in progress
        </member>
        <member name="M:Torshify.Core.WeakHandleDictionary`1.ScavengeKeys">
            <devdoc>
                This method checks to see if it is necessary to
                scavenge keys, and if it is it performs a scan
                of all keys to see which ones are no longer valid.
                To determine if we need to scavenge keys we need to
                try to track the current GC memory.  Our rule of
                thumb is that if GC memory is decreasing and our
                key count is constant we need to scavenge.  We
                will need to see if this is too often for extreme
                use cases like the CompactFramework (they add
                custom type data for every object at design time).
            </devdoc>
        </member>
        <member name="T:Torshify.SearchType">
            <summary>
            Search types
            </summary>
        </member>
        <member name="P:Torshify.SessionOptions.CacheLocation">
            <summary>
            The location where Spotify will write cache files.
            This cache include tracks, cached browse results and coverarts.
            Set to empty string ("") to disable cache
            </summary>
        </member>
        <member name="P:Torshify.SessionOptions.DeviceID">
            <summary>
            Device ID for offline synchronization
            </summary>
        </member>
        <member name="P:Torshify.SessionOptions.SettingsLocation">
            <summary>
            The location where Spotify will write setting files and per-user
            cache items. This includes playlists, track metadata, etc.
            'SettingsLocation' may be the same path as 'CacheLocation'.
            </summary>
        </member>
        <member name="P:Torshify.SessionOptions.TraceFileLocation">
            <summary>
            Path to API trace file
            </summary>
        </member>
        <member name="P:Torshify.SessionOptions.UserAgent">
            <summary>
            "User-Agent" for your application - max 255 characters long
            The User-Agent should be a relevant, customer facing identification of your application
            </summary>
        </member>
        <member name="P:Torshify.SessionOptions.CompressPlaylists">
            <summary>
            Compress local copy of playlists, reduces disk space usage
            </summary>
        </member>
        <member name="P:Torshify.SessionOptions.DontSavePlaylistMetadata">
            <summary>
            Don't save metadata for local copies of playlists
            Reduces disk space usage at the expense of needing
            to request metadata from Spotify backend when loading list
            </summary>
        </member>
        <member name="P:Torshify.SessionOptions.InitiallyUnloadPlaylists">
            <summary>
            Avoid loading playlists into RAM on startup. 
            See IPlaylist.IsInRam for more details.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Torshify.SessionOptions.Proxy" -->
        <member name="P:Torshify.SessionOptions.ProxyUsername">
            <summary>
            Username to authenticate with proxy server
            </summary>
        </member>
        <member name="P:Torshify.SessionOptions.ProxyPassword">
            <summary>
            Password to authenticate with proxy server
            </summary>
        </member>
        <member name="P:Torshify.OfflineSyncStatus.QueuedTracks">
            <summary>
            Queued tracks is things left to sync in current sync operation
            </summary>
        </member>
        <member name="P:Torshify.OfflineSyncStatus.QueuedBytes">
            <summary>
            Queued bytes is things left to sync in current sync operation
            </summary>
        </member>
        <member name="P:Torshify.OfflineSyncStatus.DoneTracks">
            <summary>
            Done tracks is things marked for sync that existed on device before current sync operation
            </summary>
        </member>
        <member name="P:Torshify.OfflineSyncStatus.DoneBytes">
            <summary>
            Done bytes is things marked for sync that existed on device before current sync operation
            </summary>
        </member>
        <member name="P:Torshify.OfflineSyncStatus.CopiedTracks">
            <summary>
             Copied tracks is things that has been copied in current sync operation
            </summary>
        </member>
        <member name="P:Torshify.OfflineSyncStatus.CopiedBytes">
            <summary>
             Copied bytes is things that has been copied in current sync operation
            </summary>
        </member>
        <member name="P:Torshify.OfflineSyncStatus.WillNotCopyTracks">
            <summary>
            Tracks that are marked as synced but will not be copied (for various reasons)
            </summary>
        </member>
        <member name="P:Torshify.OfflineSyncStatus.ErrorTracks">
            <summary>
             A track is counted as error when something goes wrong while syncing the track
            </summary>
        </member>
        <member name="P:Torshify.OfflineSyncStatus.IsSyncing">
            <summary>
            Set if sync operation is in progress
            </summary>
        </member>
        <member name="F:Torshify.PlaylistOfflineStatus.No">
            <summary>
            The playlist is not offline enabled
            </summary>
        </member>
        <member name="F:Torshify.PlaylistOfflineStatus.Yes">
            <summary>
            Playlist is synchronized to local storage
            </summary>
        </member>
        <member name="F:Torshify.PlaylistOfflineStatus.Downloading">
            <summary>
            This playlist is currently downloading. Only one playlist can be in this state any given time
            </summary>
        </member>
        <member name="F:Torshify.PlaylistOfflineStatus.Waiting">
            <summary>
            Playlist queued for download
            </summary>
        </member>
        <member name="F:Torshify.RelationType.Unknown">
            <summary>
            Not yet known
            </summary>
        </member>
        <member name="F:Torshify.RelationType.None">
            <summary>
            No relation
            </summary>
        </member>
        <member name="F:Torshify.RelationType.Unidirectional">
            <summary>
            The currently logged in user is following this user
            </summary>
        </member>
        <member name="F:Torshify.RelationType.Bidirectional">
            <summary>
            Bidirectional friendship established
            </summary>
        </member>
        <member name="T:Torshify.PlaylistType">
            <summary>
            Playlist types.
            </summary>
        </member>
        <member name="F:Torshify.PlaylistType.Playlist">
            <summary>
            A normal playlist.
            </summary>
        </member>
        <member name="F:Torshify.PlaylistType.StartFolder">
            <summary>
            Marks a folder starting point.
            </summary>
        </member>
        <member name="F:Torshify.PlaylistType.EndFolder">
            <summary>
            Marks a folder ending point.
            </summary>
        </member>
        <member name="F:Torshify.PlaylistType.Placeholder">
            <summary>
            Unknown entry.
            </summary>
        </member>
    </members>
</doc>
